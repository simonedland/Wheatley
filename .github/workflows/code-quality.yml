name: Python Code Quality Check

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  issues: write

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run flake8
        id: flake8
        run: |
          flake8 . --exit-zero --ignore=E501 \
            --format='::error file=%(path)s,line=%(row)d,col=%(col)d::%(code)s %(text)s' \
            > flake8-report.txt
          cat flake8-report.txt
          issues=$(grep -c '^::error' flake8-report.txt || true)
          echo "issue_count=$issues" >> "$GITHUB_OUTPUT"

      - name: Create or Update GitHub Issues per File
        if: github.event_name == 'push'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Collect files that have flake8 errors
          awk -F 'file=' '/^::error/ { split($2,a,","); print a[1] }' \
            flake8-report.txt | sort -u > files_with_issues.txt

          while IFS= read -r file; do
            # First 100 errors for that file
            grep "file=$file," flake8-report.txt | head -n 100 > file-issues.txt
            [ -s file-issues.txt ] || continue

            ISSUE_TITLE="Code quality issues in $file"
            CURRENT_COUNT=$(wc -l < file-issues.txt)

            # --- build issue body safely ---
            {
              echo "### ðŸš¨ flake8 identified issues in $file (showing first 100 lines):"
              echo '```'
              cat file-issues.txt
              echo '```'
              echo "Full log: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
              echo "Commit: ${{ github.sha }}"
              echo "Error count: $CURRENT_COUNT"
            } > issue_body.md
            # --------------------------------

            # Find existing issue (if any)
            ISSUE_NUMBER=$(\
              gh issue list --state open --search "$ISSUE_TITLE" --json number,title |\
              jq -r '.[] | select(.title == "'"$ISSUE_TITLE"'") | .number' | head -n 1
            )

            if [ -n "$ISSUE_NUMBER" ]; then
              LAST_COUNT=$(\
                gh issue view "$ISSUE_NUMBER" --json comments 2>/dev/null |\
                jq -r '.comments | last | .body' 2>/dev/null |\
                grep -oE 'Error count: [0-9]+' | awk '{print $3}' || true
              )
              [ "$CURRENT_COUNT" != "$LAST_COUNT" ] && \
                gh issue comment "$ISSUE_NUMBER" --body-file issue_body.md || true
            else
              gh issue create --title "$ISSUE_TITLE" --body-file issue_body.md || true
            fi
          done < files_with_issues.txt

      - name: Close resolved code quality issues
        if: steps.flake8.outputs.issue_count >= 0 && github.event_name == 'push'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue list --state open --json number,title |
          jq -r '.[] | select(.title | startswith("Code quality issues in ")) | [.number,.title] | @tsv' \
            > open_code_quality_issues.tsv

          # Current files that still have issues
          mapfile -t current_files < files_with_issues.txt

          while IFS=$'\t' read -r issue_number issue_title; do
            file_name=${issue_title#Code quality issues in }
            if ! printf '%s\n' "${current_files[@]}" | grep -Fxq "$file_name"; then
              gh issue comment "$issue_number" \
                --body "âœ… All code quality issues in \`$file_name\` have been resolved. Closing this issue."
              gh issue close "$issue_number"
            fi
          done < open_code_quality_issues.tsv
