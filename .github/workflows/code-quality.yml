name: Python Code Quality Check

on:
  push:
    branches: [main, test]
  pull_request:
    branches: [main, test]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      # 1 ─ Check out code
      - uses: actions/checkout@v4

      # 2 ─ Set up Python
      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      # 3 ─ Install flake8 and project requirements
      - name: Install Flake8 & plugins
        run: |
          python -m pip install -U pip
          pip install "flake8<7" flake8-bugbear flake8-docstrings \
                      pep8-naming flake8-cognitive-complexity
          # Optional project deps (won’t fail the run)
          if [ -f requirements.txt ]; then
            if ! pip install -r requirements.txt; then
              echo "::warning::requirements.txt install failed; continuing lint."
            fi
          fi

      # 4 ─ Run flake8 and save a plain-text report
      - name: Run Flake8 (raw report)
        id: flake8
        env:
          REPORT: flake8-report.txt
        run: |
          # We capture the exit code but don’t let it fail *this* step
          flake8 . \
            --ignore=E501,CCR001 \
            --max-complexity=10 \
            --max-cognitive-complexity=10 \
            --format="%(path)s:%(row)d:%(col)d: %(code)s %(text)s" \
            > "$REPORT" || true
          cat "$REPORT"
          echo "issue_count=$(wc -l < "$REPORT")" >> "$GITHUB_OUTPUT"

      # 5 ─ **Hard gate**: fail the job if issues remain and the PR targets main
      - name: Fail if flake8 issues are present
        if: github.event_name == 'pull_request' &&
            github.event.pull_request.base.ref == 'main' &&
            steps.flake8.outputs.issue_count != '0'
        run: |
          echo "::error file=flake8-report.txt,line=1::flake8 found ${{ steps.flake8.outputs.issue_count }} issue(s)."
          exit 1

      # 6 ─ Optional: inline PR annotations (doesn’t affect pass/fail)
      - name: Annotate PR with Flake8 (reviewdog)
        if: github.event_name == 'pull_request'
        uses: reviewdog/action-flake8@v3
        with:
          reporter: github-pr-review
          level: warning            # only warns; step #5 is the hard gate
          fail_level: none
          flake8_args: "--ignore=E501,CCR001 --max-complexity=10 --max-cognitive-complexity=10"

      # 7 ─ Upload the report as an artifact
      - name: Upload Flake8 report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: flake8-report
          path: flake8-report.txt
          if-no-files-found: warn

      # 8 ─ Sync lint issues → GitHub Issues (unchanged)
      - name: Create / update “code quality” issues
        if: github.event_name == 'push'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cut -d':' -f1 flake8-report.txt | sort -u > files_with_issues.txt
          while IFS= read -r file; do
            grep "^$file:" flake8-report.txt | head -n 100 > file-issues.txt
            [ -s file-issues.txt ] || continue
            ISSUE_TITLE="Code quality issues in $file"
            CURRENT_COUNT=$(wc -l < file-issues.txt)
            { echo "### 🚨 flake8 issues in $file (first 100 lines)"
              echo '```'; cat file-issues.txt; echo '```'
              echo "Log: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
              echo "Commit: ${{ github.sha }}"
              echo "Error count: $CURRENT_COUNT"; } > issue_body.md
            ISSUE_NUM=$(gh issue list --state open --search "$ISSUE_TITLE" \
                        --json number,title | jq -r '.[]|select(.title=="'"$ISSUE_TITLE"'")|.number' | head -n1)
            if [ -n "$ISSUE_NUM" ]; then
              LAST=$(gh issue view "$ISSUE_NUM" --json comments | \
                     jq -r '.comments|last|.body' | grep -oE 'Error count: [0-9]+' | awk '{print $3}' || true)
              [ "$CURRENT_COUNT" != "$LAST" ] &&
                gh issue comment "$ISSUE_NUM" --body-file issue_body.md || true
            else
              gh issue create --title "$ISSUE_TITLE" --body-file issue_body.md || true
            fi
          done < files_with_issues.txt

      - name: Close resolved code-quality issues
        if: steps.flake8.outputs.issue_count >= 0 && github.event_name == 'push'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue list --state open --json number,title | \
          jq -r '.[]|select(.title|startswith("Code quality issues in "))|[.number,.title]|@tsv' > open.tsv
          mapfile -t current_files < <(cut -d':' -f1 flake8-report.txt | sort -u)
          while IFS=$'\t' read -r num title; do
            file=${title#Code quality issues in }
            if ! printf '%s\n' "${current_files[@]}" | grep -Fxq "$file"; then
              gh issue comment "$num" --body "✅ All flake8 issues in \`$file\` resolved. Closing."
              gh issue close "$num"
            fi
          done < open.tsv
