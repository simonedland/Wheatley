name: Python Code Quality Check

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read          # fetch repo
  issues: write           # open / update GH issues
  actions: read           # needed for upload-sarif
  security-events: write  # upload SARIF to Code-Scanning

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      # ────── install tools ──────
      - name: Install Flake8 + plugins (SARIF included)
        run: |
          python -m pip install -U pip
          # NOTE: correct SARIF plugin is **flake8-sarif**
          pip install \
            flake8 \
            flake8-bugbear \
            flake8-docstrings \
            pep8-naming \
            flake8-cognitive-complexity \
            flake8-sarif               # ← fixed package name
          [ -f requirements.txt ] && pip install -r requirements.txt

      # ────── primary lint (console annotations) ──────
      - name: Run Flake8 (console annotations)
        id: flake8
        run: |
          flake8 . \
            --ignore=E501 \
            --max-complexity=10 \
            --max-cognitive-complexity=10 \
            --format='::error file=%(path)s,line=%(row)d,col=%(col)d::%(code)s %(text)s' \
            > flake8-report.txt || true
          cat flake8-report.txt
          issues=$(grep -c '^::error' flake8-report.txt || true)
          echo "issue_count=$issues" >> "$GITHUB_OUTPUT"

      # ────── second pass → SARIF (IDE / Code-Scanning) ──────
      - name: Run Flake8 again → SARIF
        env:
          SARIF_FILE: flake8-results.sarif
        run: |
          flake8 . \
            --ignore=E501 \
            --max-complexity=10 \
            --max-cognitive-complexity=10 \
            --format sarif \
            --output-file "$SARIF_FILE" || true

          # Ensure file exists even if flake8 failed before creating it
          if [ ! -f "$SARIF_FILE" ]; then
            echo '{"version":"2.1.0","runs":[{"results":[],"tool":{"driver":{"name":"flake8"}}}]}' > "$SARIF_FILE"
          fi

      - name: Upload SARIF to GitHub Code-Scanning
        if: always()                # run even on failure so alerts show up
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: flake8-results.sarif

      # ────── GitHub-Issue synchronisation (unchanged) ──────
      - name: Create or Update GitHub Issues per File
        if: github.event_name == 'push'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          awk -F 'file=' '/^::error/ { split($2,a,","); print a[1] }' flake8-report.txt | sort -u > files_with_issues.txt
          while IFS= read -r file; do
            grep "file=$file," flake8-report.txt | head -n 100 > file-issues.txt
            [ -s file-issues.txt ] || continue

            ISSUE_TITLE="Code quality issues in $file"
            CURRENT_COUNT=$(wc -l < file-issues.txt)

            {
              echo "### 🚨 flake8 identified issues in $file (first 100 lines)"
              echo '```'; cat file-issues.txt; echo '```'
              echo "Log: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
              echo "Commit: ${{ github.sha }}"
              echo "Error count: $CURRENT_COUNT"
            } > issue_body.md

            ISSUE_NUMBER=$(
              gh issue list --state open --search "$ISSUE_TITLE" --json number,title |
              jq -r '.[] | select(.title == "'"$ISSUE_TITLE"'") | .number' | head -n1
            )
            if [ -n "$ISSUE_NUMBER" ]; then
              LAST_COUNT=$(
                gh issue view "$ISSUE_NUMBER" --json comments 2>/dev/null |
                jq -r '.comments | last | .body' 2>/dev/null |
                grep -oE 'Error count: [0-9]+' | awk '{print $3}' || true
              )
              [ "$CURRENT_COUNT" != "$LAST_COUNT" ] && \
                gh issue comment "$ISSUE_NUMBER" --body-file issue_body.md || true
            else
              gh issue create --title "$ISSUE_TITLE" --body-file issue_body.md || true
            fi
          done < files_with_issues.txt

      - name: Close resolved code quality issues
        if: steps.flake8.outputs.issue_count >= 0 && github.event_name == 'push'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue list --state open --json number,title |
          jq -r '.[] | select(.title | startswith("Code quality issues in ")) | [.number,.title] | @tsv' \
            > open_code_quality_issues.tsv
          mapfile -t current_files < files_with_issues.txt
          while IFS=$'\t' read -r num title; do
            file=${title#Code quality issues in }
            if ! printf '%s\n' "${current_files[@]}" | grep -Fxq "$file"; then
              gh issue comment "$num" --body "✅ All code quality issues in \`$file\` have been resolved. Closing."
              gh issue close "$num"
            fi
          done < open_code_quality_issues.tsv
