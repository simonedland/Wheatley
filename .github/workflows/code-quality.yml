# .github/workflows/python-code-quality.yml
name: Python Code Quality Check

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

# extra permission needed to upload SARIF
permissions:
  contents: read
  issues: write
  security-events: write   # <â”€â”€ NEW (for upload-sarif)

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Flake8 + plugins
        run: |
          python -m pip install -U pip
          pip install \
            flake8 \
            flake8-bugbear \
            flake8-docstrings \
            pep8-naming \
            flake8-cognitive-complexity \
            flake8-sarif-formatter     # <â”€â”€ NEW (SARIF output) :contentReference[oaicite:0]{index=0}
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # â”€â”€â”€â”€â”€â”€ GitHub-annotation run (keeps your ::error output) â”€â”€â”€â”€â”€â”€
      - name: Run Flake8 (console annotations)
        id: flake8
        run: |
          flake8 . \
            --ignore=E501 \
            --max-complexity=10 \
            --max-cognitive-complexity=10 \
            --format='::error file=%(path)s,line=%(row)d,col=%(col)d::%(code)s %(text)s' \
            > flake8-report.txt || true   # keep running even if errors
          cat flake8-report.txt
          issues=$(grep -c '^::error' flake8-report.txt || true)
          echo "issue_count=$issues" >> "$GITHUB_OUTPUT"

      # â”€â”€â”€â”€â”€â”€ SARIF run (same rules, machine-readable) â”€â”€â”€â”€â”€â”€
      - name: Run Flake8 again â†’ SARIF
        run: |
          flake8 . \
            --ignore=E501 \
            --max-complexity=10 \
            --max-cognitive-complexity=10 \
            --format sarif \
            --output-file flake8-results.sarif || true

      - name: Upload SARIF to GitHub Code-Scanning
        # always upload so alerts appear even on failing builds
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: flake8-results.sarif   # :contentReference[oaicite:1]{index=1}

      # â”€â”€â”€â”€â”€â”€ GH-Issue synchronisation (unchanged) â”€â”€â”€â”€â”€â”€
      - name: Create or Update GitHub Issues per File
        if: github.event_name == 'push'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          awk -F 'file=' '/^::error/ { split($2,a,","); print a[1] }' \
            flake8-report.txt | sort -u > files_with_issues.txt
          while IFS= read -r file; do
            grep "file=$file," flake8-report.txt | head -n 100 > file-issues.txt
            [ -s file-issues.txt ] || continue
            ISSUE_TITLE="Code quality issues in $file"
            CURRENT_COUNT=$(wc -l < file-issues.txt)
            {
              echo "### ðŸš¨ flake8 identified issues in $file (showing first 100 lines):"
              echo '```'; cat file-issues.txt; echo '```'
              echo "Full log: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
              echo "Commit: ${{ github.sha }}"
              echo "Error count: $CURRENT_COUNT"
            } > issue_body.md
            ISSUE_NUMBER=$(
              gh issue list --state open --search "$ISSUE_TITLE" --json number,title |
              jq -r '.[] | select(.title == "'"$ISSUE_TITLE"'") | .number' | head -n1
            )
            if [ -n "$ISSUE_NUMBER" ]; then
              LAST_COUNT=$(
                gh issue view "$ISSUE_NUMBER" --json comments 2>/dev/null |
                jq -r '.comments | last | .body' 2>/dev/null |
                grep -oE 'Error count: [0-9]+' | awk '{print $3}' || true
              )
              [ "$CURRENT_COUNT" != "$LAST_COUNT" ] && \
                gh issue comment "$ISSUE_NUMBER" --body-file issue_body.md || true
            else
              gh issue create --title "$ISSUE_TITLE" --body-file issue_body.md || true
            fi
          done < files_with_issues.txt

      - name: Close resolved code quality issues
        if: steps.flake8.outputs.issue_count >= 0 && github.event_name == 'push'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue list --state open --json number,title |
          jq -r '.[] | select(.title | startswith("Code quality issues in ")) | [.number,.title] | @tsv' \
            > open_code_quality_issues.tsv
          mapfile -t current_files < files_with_issues.txt
          while IFS=$'\t' read -r num title; do
            file=${title#Code quality issues in }
            if ! printf '%s\n' "${current_files[@]}" | grep -Fxq "$file"; then
              gh issue comment "$num" --body "âœ… All code quality issues in \`$file\` have been resolved. Closing."
              gh issue close "$num"
            fi
          done < open_code_quality_issues.tsv
