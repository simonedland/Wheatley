name: Python Code Quality Check

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read           # checkout
  issues: write            # create / update GH issues
  actions: read            # required for code-scanning upload on private repos
  security-events: write   # allow SARIF upload to Code-Scanning

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      # ───── Setup ─────
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      # ───── Install linters (Flake8 6.x) ─────
      - name: Install Flake8 + plugins
        run: |
          python -m pip install -U pip
          pip install "flake8<7" \
                      flake8-bugbear \
                      flake8-docstrings \
                      pep8-naming \
                      flake8-cognitive-complexity \
                      flake8-sarif
          if [ -f requirements.txt ]; then
            echo "Installing project requirements…"
            if ! pip install -r requirements.txt; then
              echo "::warning::requirements.txt failed to install; continuing lint."
            fi
          fi

      # ───── Flake8 → console annotations ─────
      - name: Run Flake8 (console)
        id: flake8
        env:
          REPORT: flake8-report.txt
        run: |
          flake8 . \
            --ignore=E501 \
            --max-complexity=10 \
            --max-cognitive-complexity=10 \
            --format='::error file=%(path)s,line=%(row)d,col=%(col)d::%(code)s %(text)s' \
            > "$REPORT" || true
          cat "$REPORT"
          echo "issue_count=$(grep -c '^::error' "$REPORT" || true)" >> "$GITHUB_OUTPUT"
          # guarantee file exists
          [ -s "$REPORT" ] || touch "$REPORT"

      # ───── Flake8 → SARIF (for Code-Scanning) ─────
      - name: Run Flake8 → SARIF
        env:
          SARIF_FILE: flake8-results.sarif
        run: |
          flake8 . \
            --ignore=E501 \
            --max-complexity=10 \
            --max-cognitive-complexity=10 \
            --format sarif \
            --output-file "$SARIF_FILE" || true
          # stub empty SARIF if not created
          [ -f "$SARIF_FILE" ] || \
            echo '{"version":"2.1.0","runs":[{"tool":{"driver":{"name":"flake8"}},"results":[]} ]}' > "$SARIF_FILE"

      - name: Upload SARIF to Code-Scanning
        continue-on-error: true        # don’t fail if Code-Scanning is disabled
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: flake8-results.sarif
          category: flake8

      # ───── Upload artifacts (SARIF + raw log) ─────
      - name: Upload lint artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: flake8-results
          path: |
            flake8-results.sarif
            flake8-report.txt
          if-no-files-found: warn

      # ───── GitHub-Issue sync ─────
      - name: Create / update “code quality” issues
        if: github.event_name == 'push'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          awk -F 'file=' '/^::error/ {split($2,a,","); print a[1]}' flake8-report.txt | sort -u > files_with_issues.txt
          while IFS= read -r file; do
            grep "file=$file," flake8-report.txt | head -n 100 > file-issues.txt
            [ -s file-issues.txt ] || continue
            ISSUE_TITLE="Code quality issues in $file"
            CURRENT_COUNT=$(wc -l < file-issues.txt)
            {
              echo "### 🚨 flake8 issues in $file (first 100 lines)"
              echo '```'; cat file-issues.txt; echo '```'
              echo "Log: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
              echo "Commit: ${{ github.sha }}"
              echo "Error count: $CURRENT_COUNT"
            } > issue_body.md
            ISSUE_NUMBER=$(gh issue list --state open --search "$ISSUE_TITLE" --json number,title |
              jq -r '.[] | select(.title=="'"$ISSUE_TITLE"'") | .number' | head -n1)
            if [ -n "$ISSUE_NUMBER" ]; then
              LAST_COUNT=$(gh issue view "$ISSUE_NUMBER" --json comments |
                jq -r '.comments|last|.body' |
                grep -oE 'Error count: [0-9]+' | awk '{print $3}' || true)
              [ "$CURRENT_COUNT" != "$LAST_COUNT" ] &&
                gh issue comment "$ISSUE_NUMBER" --body-file issue_body.md || true
            else
              gh issue create --title "$ISSUE_TITLE" --body-file issue_body.md || true
            fi
          done < files_with_issues.txt

      - name: Close resolved code-quality issues
        if: steps.flake8.outputs.issue_count >= 0 && github.event_name == 'push'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue list --state open --json number,title |
          jq -r '.[]|select(.title|startswith("Code quality issues in "))|[.number,.title]|@tsv' > open.tsv
          mapfile -t current_files < files_with_issues.txt
          while IFS=$'\t' read -r num title; do
            file=${title#Code quality issues in }
            if ! printf '%s\n' "${current_files[@]}" | grep -Fxq "$file"; then
              gh issue comment "$num" --body "✅ All flake8 issues in \`$file\` resolved. Closing."
              gh issue close "$num"
            fi
          done < open.tsv
