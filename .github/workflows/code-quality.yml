name: Python Code Quality Check

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  issues: write

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run flake8
        id: flake8
        run: |
          flake8 . --exit-zero --ignore=E501 --format='::error file=%(path)s,line=%(row)d,col=%(col)d::%(code)s %(text)s' > flake8-report.txt
          cat flake8-report.txt
          issues=$(grep -c '^::error' flake8-report.txt || true)
          echo "issue_count=$issues" >> $GITHUB_OUTPUT

      - name: Create or Update GitHub Issues per File
        if: steps.flake8.outputs.issue_count > 0 && github.event_name == 'push'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Group flake8 errors by file
          awk -F 'file=' '/^::error/ { split($2, a, ","); print a[1] }' flake8-report.txt | sort | uniq > files_with_issues.txt

          while IFS= read -r file; do
            # Extract issues for this file (limit to 100 lines)
            grep "file=$file," flake8-report.txt | head -n 100 > file-issues.txt
            if [ ! -s file-issues.txt ]; then continue; fi

            ISSUE_TITLE="Code quality issues in $file"
            # Build issue body in a file to avoid YAML/shell escaping issues
            {
              echo "### ðŸš¨ flake8 identified issues in $file (showing first 100 lines):"
              echo '```'
              cat file-issues.txt
              echo '```'
              echo "Full log is available in the workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
              echo "Commit: ${{ github.sha }}"
            } > issue_body.md

            # Find existing open issue for this file
            ISSUE_NUMBER=$(gh issue list --state open --search "$ISSUE_TITLE" --json number,title | jq -r ".[] | select(.title == \"$ISSUE_TITLE\") | .number" | head -n 1)

            if [ -n "$ISSUE_NUMBER" ]; then
              # Update the existing issue
              gh issue comment "$ISSUE_NUMBER" --body-file issue_body.md
            else
              # Create a new issue
              gh issue create --title "$ISSUE_TITLE" --body-file issue_body.md
            fi
          done < files_with_issues.txt
